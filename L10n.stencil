// Generated using SwiftGen, by O.Halligon â€” https://github.com/SwiftGen/SwiftGen
// swiftlint:disable superfluous_disable_command
// swiftlint:disable file_length
// swiftlint:disable explicit_type_interface identifier_name line_length nesting type_body_length type_name
{% set showTranslation %}{{param.showTranslation|default:true}}{% endset %}
{% set accessModifier %}{% if param.publicAccess %}public{% else %}internal{% endif %}{% endset %}
{% set indentSpace %}{{param.indentSpace|default:"    "}}{% endset %}
{% set indentSpace2 %}{{indentSpace}}{{indentSpace}}{% endset %}
{# #}
import Foundation

{% if tables.count > 0 %}
{# #}
{% macro parametersBlock types %}{% filter removeNewlines:"leading" %}
  {% for type in types %}
    _ p{{forloop.counter}}: {{type}}{% if not forloop.last %}, {% endif %}
  {% endfor %}
{% endfilter %}{% endmacro %}
{% macro argumentsBlock types %}{% filter removeNewlines:"leading" %}
  {% for type in types %}
    p{{forloop.counter}}{% if not forloop.last %}, {% endif %}
  {% endfor %}
{% endfilter %}{% endmacro %}
{% macro recursiveBlock table item sp %}
{% for string in item.strings %}
{% if showTranslation %}
{{sp}}// {{ string.translation }}
{% endif %}
{% if string.types %}
{{sp}}{{accessModifier}} static func {{string.name|swiftIdentifier:"pretty"|lowerFirstWord|escapeReservedKeywords}}({% call parametersBlock string.types %}) -> String {
{{sp}}{{indentSpace}}return String.tr("{{table}}", "{{string.key}}", {% call argumentsBlock string.types %})
{{sp}}}
{% else %}
{{sp}}{{accessModifier}} static var {{string.name|swiftIdentifier:"pretty"|lowerFirstWord|escapeReservedKeywords}}: String {
{{sp}}{{indentSpace}}return String.tr("{{table}}", "{{string.key}}")
{{sp}}}
{% endif %}
{% ifnot forloop.last %}

{% endif %}
{% endfor %}
{% for child in item.children %}
{% ifnot forloop.first %}

{% endif %}
{{sp}}{{accessModifier}} enum {{child.name|swiftIdentifier:"pretty"|escapeReservedKeywords}} {
{% set sp2 %}{{sp}}{{indentSpace}}{% endset %}
{% call recursiveBlock table child sp2 %}
{{sp}}}
{% endfor %}
{% endmacro %}
{# #}
extension String {
{% if tables.count > 1 %}
{% for table in tables %}
{{indentSpace}}{{accessModifier}} enum {{table.name|swiftIdentifier:"pretty"|escapeReservedKeywords}} {
{% call recursiveBlock table.name table.levels indentSpace %}
{{indentSpace}}}
{% endfor %}
{% else %}
{% call recursiveBlock tables.first.name tables.first.levels indentSpace %}
{% endif %}
}

private extension String {
    private static func tr(_ table: String, _ key: String, _ args: CVarArg...) -> String {
        return String(format: key.localized(using: table), arguments: args)
    }

    func localized(using tableName: String? = nil) -> String {
        let languageCode = "en"
        let bundle = Bundle.main

        if let path = bundle.path(forResource: languageCode, ofType: "lproj"),
           let bundle = Bundle(path: path) {
            return bundle.localizedString(forKey: self, value: nil, table: tableName)
        }
        return self
    }
}

extension Optional where Wrapped == String {
    typealias Xo = String.Xo
}
{% else %}
// No string found
{% endif %}
