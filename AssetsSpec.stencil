// Generated using SwiftGen, by O.Halligon â€” https://github.com/SwiftGen/SwiftGen
// swiftlint:disable superfluous_disable_command file_length identifier_name line_length nesting type_body_length type_name
{# empty line #}
{% if catalogs %}
{% set colorAlias %}{{param.colorAliasName|default:"AssetColor"}}{% endset %}
{% set imageAlias %}{{param.imageAliasName|default:"AssetImage"}}{% endset %}
{% set accessModifier %}{% if param.publicAccess %}public{% else %}internal{% endif %}{% endset %}
{% set imageType %}{{param.imageTypeName|default:"ImageAsset"}}{% endset %}
{% set colorType %}{{param.colorTypeName|default:"ColorAsset"}}{% endset %}
{% set indentSpace %}{{param.indentSpace|default:"    "}}{% endset %}
{% set indentSpace2 %}{{indentSpace}}{{indentSpace}}{% endset %}
{% set indentSpace3 %}{{indentSpace2}}{{indentSpace}}{% endset %}

import Foundation
import UIKit
import Quick
import Nimble
import NSpry
import NSpry_Nimble

@testable import JetSmarter7

{% macro casesBlock assets assetType sp %}
{% for asset in assets %}
{% if asset.type == "color" and assetType == "color" %}
{% set colorName %}{{asset.name|swiftIdentifier:"pretty"|lowerFirstWord|escapeReservedKeywords}}{% endset %}
{{sp}}it("{{colorName}}") {
{{sp}}{{indentSpace}}let actual = UIColor.xo.{{colorName}}
{{sp}}{{indentSpace}}let expected = UIColor.testMake(named: "{{asset.name}}")
{{sp}}{{indentSpace}}expect(actual.equal(with: expected)) == true
{{sp}}{{indentSpace}}expect(actual.equal(with: emptyColor)) == false
{{sp}}}
{% ifnot forloop.last %}

{% endif %}
{% elif asset.type == "image" and assetType == "image" %}
{% set imageName %}{{asset.name|swiftIdentifier:"pretty"|lowerFirstWord|escapeReservedKeywords}}{% endset %}
{{sp}}it("{{imageName}}") {
{{sp}}{{indentSpace}}let actual = UIImage.xo.{{imageName}}
{{sp}}{{indentSpace}}let expected = UIImage.testMake(named: "{{asset.name}}")
{{sp}}{{indentSpace}}expect(actual.equal(with: expected)) == true
{{sp}}{{indentSpace}}expect(actual.equal(with: emptyImage)) == false
{{sp}}}
{% ifnot forloop.last %}

{% endif %}
{% elif asset.items %}
{% call casesBlock asset.items type sp %}
{% endif %}
{% endfor %}
{# #}
{% endmacro %}
{# #}
{% macro structBlock enumName type sp %}
{% set sp2 %}{{sp}}{{indentSpace}}{% endset %}
{{sp}}describe("{{enumName}}") {
{% if catalogs.count > 1 %}
{% for catalog in catalogs %}
{{sp2}}describe("{{catalog.name|swiftIdentifier:"pretty"|escapeReservedKeywords}}") {
{% call casesBlock catalog.assets type sp2 %}
{{sp2}}}
{% endfor %}
{% else %}
{% call casesBlock catalogs.first.assets type sp2 %}
{% endif %}
{{sp}}}
{% endmacro %}
{# #}
final class AssetsSpec: QuickSpec {
    override func spec() {
        describe("AssetsSpec") {
            let emptyImage = UIImage()
            let emptyColor = UIColor.clear

	        {% call structBlock imageAlias "image" indentSpace3 %}

	        {% call structBlock colorAlias "color" indentSpace3 %}
        }
    }
}

private extension UIImage {
    static func testMake(named name: String) -> UIImage {
        return UIImage(named: name, in: .main, compatibleWith: nil).unsafelyUnwrapped
    }

    func equal(with other: UIImage) -> Bool {
        guard other.size == size else {
            return false
        }

        guard other == self else {
            return false
        }

        return other.pngData() == pngData()
    }
}

private extension UIColor {
    enum Style: Equatable {
        case light
        case dark
    }

    static func testMake(named name: String) -> UIColor {
        return UIColor(named: name, in: .main, compatibleWith: nil).unsafelyUnwrapped
    }

    func real(_ style: Style) -> UIColor {
        if #available(iOS 13, *) {
            let userInterfaceStyle: UIUserInterfaceStyle
            switch style {
            case .dark:
                userInterfaceStyle = .dark
            case .light:
                userInterfaceStyle = .light
            }
            let traitCollection = UITraitCollection(userInterfaceStyle: userInterfaceStyle)
            return resolvedColor(with: traitCollection)
        }

        return self
    }

    func equal(with other: UIColor) -> Bool {
        guard other == self else {
            return false
        }

        return real(.dark) == other.real(.dark)
        && real(.light) == other.real(.light)
    }

    struct Components: Equatable {
        fileprivate var _base: UIColor

        public var rgba: (r: CGFloat, g: CGFloat, b: CGFloat, a: CGFloat) {
            var r: CGFloat = 0
            var g: CGFloat = 0
            var b: CGFloat = 0
            var a: CGFloat = 0

            _base.getRed(&r, green: &g, blue: &b, alpha: &a)
            return (r, g, b, a)
        }

        public var hsva: (h: CGFloat, s: CGFloat, v: CGFloat, a: CGFloat) {
            var h: CGFloat = 0
            var s: CGFloat = 0
            var v: CGFloat = 0
            var a: CGFloat = 0

            _base.getHue(&h, saturation: &s, brightness: &v, alpha: &a)
            return (h, s, v, a)
        }

        public var hex: UInt {
            let rgba = rgba
            let irgba: (r: Int, g: Int, b: Int, a: Int) = (Int(rgba.r * 255) & 0xFF,
                                                           Int(rgba.g * 255) & 0xFF,
                                                           Int(rgba.b * 255) & 0xFF,
                                                           Int(rgba.a * 255) & 0xFF)
            let urgba: (r: Int, g: Int, b: Int, a: Int) = (irgba.r << 24,
                                                           irgba.r << 16,
                                                           irgba.r << 8,
                                                           irgba.r << 0)
            return UInt(urgba.r | urgba.g | urgba.b | urgba.a)
        }

        static func == (lhs: Self, rhs: Self) -> Bool {
            func closeTo(_ a: CGFloat, _ b: CGFloat) -> Bool {
                return Int(a * 255) == Int(b * 255)
            }

            let actualComponents = lhs.rgba
            let expectedComponents = rhs.rgba

            return closeTo(expectedComponents.r, actualComponents.r)
            && closeTo(expectedComponents.g, actualComponents.g)
            && closeTo(expectedComponents.b, actualComponents.b)
            && closeTo(expectedComponents.a, actualComponents.a)
        }
    }

    var components: Components {
        return Components(_base: self)
    }
}
{% else %}
// No assets found
{% endif %}
